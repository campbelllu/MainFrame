#nifty loop checking
# print(len(revenue))
# tar = eps
# def loopCheck(target):
#     if len(target) > 1:
#         for y in target:
#             if len(y) > 1:
#                 for z in y:
#                     print(z)
#             else:
#                 print(y[0])
#     else:
#         print(target[0])

# loopCheck(eps)
# loopCheck(revenue)
# loopCheck(ultimateList)
###
#time tests
# time1 = time.time()
# time2 = time.time()
# print('time to complete')
# print((time2-time1)*1000)
###
#yahoo stuff
# ticker = 'MSFT'
# stock = yf.Ticker(ticker)
# dict1 = stock.info
# marketCap = dict1['marketCap']

# # pe = dict1['pe']
# # for x in dict1:
# #     print(x)
# print(marketCap)
###

#set checks
# print(set(fullNulls).difference(yearsOff))
# print(set(fullNulls).difference(fullNulls))

# print(set(divsYearsOff).intersection(incYearsOff))
# fullNullOverlap = set(incFullNulls).intersection(divsFullNulls)
# yearsOffOverlap = set(divsYearsOff).intersection(incYearsOff)
# print(fullNullOverlap)
# print(yearsOffOverlap)
# print(set(fullNullOverlap).intersection(yearsOffOverlap))
###

# Let’s quickly visualize some of the data we just downloaded. 
# As an example we’ll look at quarterly revenues for one of the largest 
# US-based global logistics companies, Expeditors International of Washington Inc. 
# We’ll also clean up the data a bit to make a more readable figure.

# EDGAR_data2 = pd.read_csv('./sec_related/' + 'EDGAR1' + '.csv')
# EXPD_data = EDGAR_data2[EDGAR_data2['ticker'] == 'EXPD'].copy()
# EXPD_data['frame'] = EXPD_data['frame'].str.replace('CY',"")
# EXPD_data['val_billions'] = EXPD_data['val'] / 1000000000

# sns.set_theme(style='darkgrid')
# fig = sns.lineplot(data=EXPD_data, x='frame', y='val_billions')
# fig.set(xlabel='Quarter', ylabel='Revenue(billions USD)', title='EXPD')
# plt.show()

# f = open('./demoData.txt', 'a')
    # f.write(company_data)
    # f.close()

# f = open('./demoData.txt', 'r')
# print(f.read())

#neato percentile manual function
# time1 = time.time()
# isitalist = print_DB(testlistquery, 'return')['sharesGrowthRate'].tolist()
# # print(isitalist)
# #numbers
# isitalist = [x for x in isitalist if not np.isnan(x)]

# q12 = np.percentile(isitalist, 25)
# q32 = np.percentile(isitalist, 75)
# iqr2 = q32-q12

# # print(isitalist)
# #strings
# # isitalist = [eval(i) for i in isitalist]
# # for x in isitalist:
# #     print(type(x))
# median = np.median(isitalist)
# print('median')
# print(median)
# q1list = []
# q2list = []
# i = 0
# j = 0
# length = len(isitalist)
# while i < length:
#     x = isitalist[i]
#     if x < median:
#         q1list.append(x)
#     i += 1
# # print(q1list)
# q1 = np.median(q1list)
# while j < length:
#     x = isitalist[j]
#     if x > median:
#         q2list.append(x)
#     j += 1
# # print(q2list)
# q3 = np.median(q2list)
# iqr_test = q3-q1
# ar_top = median + iqr_test
# ar_bottom = median - iqr_test
# ar_top2 = median + iqr2
# ar_bottom2 = median - iqr2
# # print(ar_top, ar_bottom)


